import com.android.build.OutputFile

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def dartEnvironmentVariables = []
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            [(pair.first()): pair.last()]
        }
}

android {
    namespace = "com.gilang.my_quran"
    compileSdk = flutter.compileSdkVersion
    // ndkVersion = flutter.ndkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }
    kotlinOptions {
        jvmTarget = 19
    }


    // sourceSets {
    //     main.java.srcDirs += 'src/main/kotlin'
    // }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.gilang.my_quran"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        buildConfigField "String", "BUILD_DATE", "\"${new Date().format("yyyy-MM-dd_HH-mm-ss")}\""
        manifestPlaceholders += dartEnvironmentVariables
    }

    flavorDimensions "default"
    productFlavors { 
        production {
            dimension "default"
            applicationIdSuffix ""
            manifestPlaceholders = [appName: "My Quran"]
        }
        staging {
            dimension "default"
            applicationIdSuffix ".stg"
            manifestPlaceholders = [appName: "[STG] My Quran"]
        }
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: "[DEV] My Quran"]
        }
    }

    buildTypes {
        release {
            shrinkResources false
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
        profile {
            shrinkResources false
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // Use app name instead of applicationId
            def apkName = "my_quran" // Replace with the actual app name
            def flavor = variant.flavorName ?: "" // Handle flavor if available
            def buildType = variant.buildType.name // Build type (debug/release)
            def version = variant.versionName // Version name
            def buildDate = new Date().format("yyyyMMddHHmm") // Build date for timestamp

            // ABI-specific version codes for APK splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI) // Get ABI if present

            // Generate version code for ABI if needed
            def versionCodeSuffix = abi != null ? versionCodes[abi] : ""

            // Generate the new APK file name
            def newApkName = "${apkName}${flavor ? "-${flavor}" : ""}-v${version}${abi ? "-${abi}" : ""}-${buildDate}.apk"
            
            outputFileName = newApkName // Assign the new APK name
        }
    }
}

flutter {
    source = "../.."
}

// Ensure that the output directory is correct for Flutter
tasks.whenTaskAdded { task ->
    if (task.name.contains("package")) {
        task.doLast {
            def outputDir = file("${buildDir}/outputs/flutter-apk/")
            if (outputDir.exists()) {
                outputDir.eachFile { file ->
                    if (file.name.endsWith(".apk")) {
                        def renamedFile = new File(outputDir, "my_quran-${file.name}")
                        file.renameTo(renamedFile)
                    }
                }
            }
        }
    }
}

// dependencies {
//     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
// }