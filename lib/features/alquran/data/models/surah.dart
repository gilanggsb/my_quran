import 'dart:convert';

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hive_ce/hive.dart';

part 'surah.freezed.dart';
part 'surah.g.dart';

Surah surahFromJson(String str) => Surah.fromJson(json.decode(str));

String surahToJson(Surah data) => json.encode(data.toJson());

@Freezed(fromJson: false, toJson: false)
@HiveType(typeId: 2) // Assign a unique typeId for Hive
@JsonSerializable(fieldRename: FieldRename.snake)
class Surah with _$Surah {
  const Surah._();

  const factory Surah({
    @HiveField(0) String? audioUrl,
    @HiveField(1) String? nameEn,
    @HiveField(2) String? nameId,
    @HiveField(3) String? nameLong,
    @HiveField(4) String? nameShort,
    @HiveField(5) String? number,
    @HiveField(6) String? numberOfVerses,
    @HiveField(7) String? revelation,
    @HiveField(8) String? revelationEn,
    @HiveField(9) String? revelationId,
    @HiveField(10) String? sequence,
    @HiveField(11) String? tafsir,
    @HiveField(12) String? translationEn,
    @HiveField(13) String? translationId,
  }) = _Surah;

  // Custom fromJson method generated by Freezed
  factory Surah.fromJson(Map<String, dynamic> json) => _$SurahFromJson(json);

  // Custom toJson method generated by Freezed
  Map<String, dynamic> toJson() => _$SurahToJson(this);
}

extension SurahExt on Surah {
  String get translateRevelationId => revelationId == null
      ? ''
      : revelationId!.contains('Madaniyyah')
          ? 'Madinah'
          : 'Mekkah';
}
