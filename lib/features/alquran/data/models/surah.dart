import 'dart:convert';

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hive_ce/hive.dart';

import '../../../../lib.dart';


part 'surah.freezed.dart';
part 'surah.g.dart';

Surah surahFromJson(String str) => Surah.fromJson(json.decode(str));

String surahToJson(Surah data) => json.encode(data.toJson());

@customFreezed
@HiveType(typeId: 2) // Assign a unique typeId for Hive
abstract class Surah with _$Surah {
  const Surah._();
  @customJsonSerializable
  const factory Surah({
    @HiveField(0) String? audioUrl,
    @HiveField(1) String? nameEn,
    @HiveField(2) String? nameId,
    @HiveField(3) String? nameLong,
    @HiveField(4) String? nameShort,
    @HiveField(5) @StringToIntConverter() int? number,
    @HiveField(6) @StringToIntConverter() int? numberOfVerses,
    @HiveField(7) String? revelation,
    @HiveField(8) String? revelationEn,
    @HiveField(9) String? revelationId,
    @HiveField(10) String? sequence,
    @HiveField(11) String? tafsir,
    @HiveField(12) String? translationEn,
    @HiveField(13) String? translationId,
  }) = _Surah;

  // Custom fromJson method generated by Freezed
  factory Surah.fromJson(Map<String, dynamic> json) => _$SurahFromJson(json);

}

extension SurahExt on Surah {
  String get translateRevelationId =>
      revelationId == null
          ? ''
          : revelationId!.contains('Madaniyyah')
          ? 'Madinah'
          : 'Mekkah';
}
